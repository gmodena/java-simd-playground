/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.gmodena.simd;


import jdk.incubator.vector.FloatVector;
import jdk.incubator.vector.VectorSpecies;
import org.openjdk.jmh.annotations.*;

import java.io.IOException;
import java.util.Random;

@BenchmarkMode(Mode.AverageTime)
@State(Scope.Thread)
@Measurement(iterations = 1)
public class Runner {
    @State(Scope.Thread)
    public static class BenchmarkState {
        Random rand = new Random(42);

        int maxRecords = 10_000_000;
    }

    @BenchmarkMode(Mode.AverageTime)
    @Measurement(iterations = 1)
    public float[] initArray(BenchmarkState state) {
        float[] array = new float[state.maxRecords];
        for (int i = 0; i < array.length; i++) {
            array[i] = state.rand.nextFloat();
        }
        return array;
    }

    static final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_256;


    void mul(float[] array, float by) {
        for (int i = 0; i < array.length; i++) {
            array[i] *= by;
        }
    }

    void vectorizedMul(float[] array, float by) {
        int i = 0;
        int bound = SPECIES.loopBound(array.length);
        FloatVector byVector = FloatVector.broadcast(SPECIES, by);
        for (; i < bound; i += SPECIES.length()) {
            FloatVector vec = FloatVector.fromArray(SPECIES, array, i);
            FloatVector multiplied = vec.mul(byVector);
            multiplied.intoArray(array, i);
        }
        for (; i < array.length; i++) {
            array[i] *= by;
        }
    }

    void dot(float[] array, float[] other) {

    }

    void vectorizedDot(float[] array, float[] other) {

    }

    @Benchmark
    public void benchMul() {
        BenchmarkState state = new BenchmarkState();
        float[] array = initArray(state);
        mul(array, 3.14f);
    }

    @Benchmark
    public void benchVectorizedMul() {
        BenchmarkState state = new BenchmarkState();
        float[] array = initArray(state);
        vectorizedMul(array, 3.14f);
    }

    public static void main(String[] args) throws IOException {
        org.openjdk.jmh.Main.main(args);
    }
}
